# StudyGroup Day 22!

# 22. 플로이드
# https://www.acmicpc.net/problem/11404

import sys
input = sys.stdin.readline

N = int(input())   # 값 입력 및 변수 생성
M = int(input())
max_cost = float('inf')
bus_graph = [[0 if j == i else max_cost for j in range(N)] for i in range(N)]

for _ in range(M):
    a, b, c = map(int, input().split())
    bus_graph[a-1][b-1] = min(bus_graph[a-1][b-1], c)   # 버스 노선도 값 입력 및 저장

'''
for idx in range(N):
    print(*bus_graph[idx])   # 플로이드-워셜 알고리즘 수행 전 노선도 확인
'''

for k in range(N):
    for i in range(N):
        for j in range(N):
            bus_graph[i][j] = min(bus_graph[i][j], bus_graph[i][k] + bus_graph[k][j])   # 플로이드 워셜 알고리즘 수행

for idx in range(N):
    print(*[0 if b_g == max_cost else b_g for b_g in bus_graph[idx]])   # 출력

# 플로이드-워셜 알고리즘에 관한 문제. 아니, 딱 그 자체네.
# (부트캠프? 스터디그룹? 하여튼 여기를 처음 들어왔을 때 생각이 난다.
#  최단거리 도출 알고리즘이라면서 여러가지를 알려줬었지...
#  벨만-포드... 다익스트라... 또 뭐 있더라. A*? 뭐 있었는데, 그리고 다른 하나가 이거다.
#  flood-washer같은 느낌이라서 묘하게 외우기 쉬웠던 이름.)
# 플로이드-워셜 알고리즘은 최단거리 도출 알고리즘인데,
# 모든 정점의 모든 최단거리를 도출하고 싶을 때 사용한다.
# 음의 가중치가 있어도 사용 가능하긴 하나, 그로 인해 음의 순환이 발생하면 사용할 수 없어진다고.
# 동적 계획법을 이용하며, 핵심은 각 정점을 '경유지'로 생각한다는 것. 작동 구조는 다음과 같다.
# 정점이 1~N까지 있다고 가정하자.
# 특정 정점 k를 지정했을 때, 임의의 정점 둘 (i, j) 쌍이 있으면
# i->j 경로와 i->k->j 경로를 비교해 후자가 더 적으면 그 값으로 갱신한다.
# 이를 한 k에 대해 모든 (i, j) 쌍으로 반복하고,
# 해당 작업을 모든 k에 대해 반복하면 된다.
# (써놓긴 했는데, 이게 왜 되는건지는 정확히 잘 모르겠다. 수학적으로 이해가 안 간다 해야 하나, 논리적으로 이해가 안 간다 해야 하나...
#  확실히 중간중간 갱신이 되긴 할테니 동적 계획법일거고, 뭔가 그럴 듯한데... 머리에 팍 꽂혀서 이해되는 그런 느낌이 없다.
#  그냥 그렇구나... 하는 느낌. 마치 학창 시절 수학 공식을 이해하지 않고 사용하는 것 같달까.)
# 즉, 각 개수가 N개인 모든 k, 모든 i, 모든 j에 대해 이 연산을 반복하게 되므로 시간 복잡도는 O(n^3)이며, 따라서 작은 규모의 데이터셋에만 사용할 수 있다.
# (아마 더 빨리 하는 방법이 있으리라는 생각이 든다. 실제로 내가 제출한 것보다 시간이 1/3 정도 절약된 제출이 있었으니까.)
# 하지만 코드를 보면 알 수 있듯이 구현이 매우 직관적이고 간편하다는 장점이 있어 충분히 쓰일 여지가 있다. ...원리를 이해했는지는 별개로 말이다.



# 음, 생각보다 쉬웠다. 1시간 내 풀라는 이유가 있었군그래.



# 참고 웹사이트
1. https://velog.io/@kimdukbae/%ED%94%8C%EB%A1%9C%EC%9D%B4%EB%93%9C-%EC%9B%8C%EC%85%9C-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98-Floyd-Warshall-Algorithm
2. https://chanhuiseok.github.io/posts/algo-50/
3. https://olrlobt.tistory.com/43

# 타 레벨 문제
B. https://www.acmicpc.net/problem/18870
M. https://www.acmicpc.net/problem/11053
C. 
