# StudyGroup Day 15!

# 15. 치킨 배달
# https://www.acmicpc.net/problem/15686

from itertools import combinations as comb


def chicken_norm(ch_li):   # 사용자 정의 '치킨 거리' 계산 함수
    ret = 0

    for h in home:
        min_ch = float('inf')   # 초기값 지정

        for c_l in ch_li:
            min_ch = min(min_ch, abs(h[0]-c_l[0]) + abs(h[1]-c_l[1]))   # 최솟값 갱신

        ret += min_ch   # 누산

    return ret   # 반환


N, M = map(int, input().split())   # 값 입력 및 변수 생성
catalog = ['home', 'chicken']
home = []
chicken = []
min_norm = float('inf')

for i in range(N):
    row_city = list(map(int, input().split()))   # 도시 값 입력

    for j in range(N):

        if row_city[j]:   # 건물이 있다면
            eval(f'{catalog[(row_city[j]-1)]}').append(tuple([i, j]))   # 건물 종류에 따라 특정한 리스트에 해당 건물 좌표 저장

for surv_chick in list(comb(chicken, M)):   # 치킨 집 좌표 리스트로 조합 생성
    min_norm = min(min_norm, chicken_norm(surv_chick))   # 도시 치킨 거리 최솟값 갱신

print(min_norm)   # 출력

# 특정 지점들 간 택시 거리가 최소화되는 지점을 찾아 그 값을 출력하는 문제.
# 집의 위치에 따라 최소 택시 거리인 치킨 집이 다르기 때문에, 총합을 구해 특정 치킨 집을 하나하나 지우는건 의미 없다.
# 그러니, 치킨 집을 남기는 모든 경우의 수를 다 따져봐야 한다는건데,
# 아무리 N, M 값이 작다 한들, 각 경우의 수의 택시 거리 구할 때마다 온 리스트를 다 뒤져서 여기가 치킨 집인지 집인지 판단하는건 바보같은 짓일 것 같다.
# 그래서 어차피 리스트를 읽어야 하니, 중요한 건 집과 치킨 집의 위치니까 좌표 정보만 추출해서 리스트에 저장했다.
# (좀 깔끔해보이기 위해 eval을 썼지만, eval은 위험한 기능임을 언제나 숙지해야 한다.)
# 그리고 그걸 combination을 써서 조합을 생성한 뒤 최솟값을 구해주면 끝.
# 솔직히 안 될줄 알았는데, 깔끔하게 통과되서 놀랐다.



# 아무리 해도 프로그래머스는 정이 잘 안 간단 말이지.
# (그래도 문제를 보긴 봤다. 보통은 최소 비용 경로를 구하는데, '최대 가중치가 최소치'인 경로를 구하라 해서 살짝 당황스러웠다.
#  이럴 떈 어떻게 해야 하지 싶었다. 음... 그냥 완전 탐색 돌리면 해결 되나? 싶다가 풀고 싶은 마음은 안 들어서 힌트를 봤는데,
#  다익스트라 알고리즘이라길래 의아했다. 최소 비용 경로를 구하는 알고리즘으로 어떻게 해결할까?
#  근데 다익스트라의 구현 과정을 생각해보면 또 그럴듯 한 것 같다.
#  다익스트라 알고리즘은 방문하지 않은 정점 중 가장 비용이 낮은 정점을 우선 탐색하니까,
#  필연적으로 가중치가 작은 간선을 우선적으로 가게 될 테니까.)
# 그래서 그냥 가벼운 마음으로 미들러 내려와서 조금 생각하다 문제 하나 깔끔하게 박살내버렸다.
# 너무 잘 먹혀서 당황스럽긴 하지만... 이것보다 더 좋은 방법이 있을 것 같긴한데, 아직은 잘 모르겠다.
# (백트래킹이 어느 부분에서 쓰였을까? 그러고보니 라이브러리 없이 조합은 어떻게 만들지? 그 방식이 백트래킹인가?)
# 백트래킹의 뜻을 조금 달리 적용해서, 함수 부분에 치킨 거리 계산 중에 현재 저장된 최솟값보다 커지면 계산을 중단하도록 하긴 했는데,
# (더 이상 계산해봤자 의미 없는 '가망 없는 경우의 수'니까.)
# 한 몇십ms 빨라지긴 했다. 그래도... 100대는 찍고 싶었는데. 흠...



# 참고 웹사이트
1.

# 타 레벨 문제
B. https://www.acmicpc.net/problem/4949
M. 
C. https://school.programmers.co.kr/learn/courses/30/lessons/118669
