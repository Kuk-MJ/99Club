# StudyGroup Day 4!

#4. 기타 레슨
# https://www.acmicpc.net/problem/2343

N, M = map(int, input().split())
nums = list(map(int, input().split()))   # 값 입력

lft= max(nums)
rght = sum(nums)
mid = (lft + rght) // 2   # 이분 탐색을 위한 변수 생성
min_mid = float('inf')   # (과거 코드 잔재. 의미 없음)

while lft <= rght:
    tmp_sum = 0
    tmp_M = 1   # 필요 개수 파악용 변수 생성

    for i in range(N):
        if tmp_sum + nums[i] > mid:   # 현재 길이가 요구값을 넘었다면
            tmp_sum = nums[i]
            tmp_M += 1   # 개수 적립 후 길이 초기화
        else:
            tmp_sum += nums[i]   # 아니라면 길이 증가

    if tmp_M > M:
        lft = mid + 1   # 개수가 더 많다면 길이를 늘이고
    else:
        rght = mid - 1   # 개수가 더 적다면 길이를 줄임
    mid = (lft + rght) // 2   # 중간값 조절

print(lft)   # 출력

# 이분 탐색 문제.
# 알고리즘 분류 확인 전에는 이게 왜 도대체 이분 탐색인가 의아해했었는데,
# 하도 고민하다 답이 나오지 않아 결국 인터넷에 검색을 하니 해답을 찾았다.
# 처음 생각했을 땐 대강
# '총 길이 // 요구 개수로 '적정 길이'를 구하고, 각 길이를 누적 합으로 만든 뒤,
#  그걸 이분 탐색해서 몇 개가 나오는지 찾는거구나!' 같은 느낌이었는데,
# 누군가의 블로그를 보니 최소 가능 길이와 최대 가능 길이를 설정하고 그걸로 이분 탐색을 하는 거였다.
# 하나씩 더해가며 중간값을 넘어가면 개수를 적립하는 식으로 개수를 파악하고,
# 필요 개수보다 많다면 길이를 늘리고, 필요 개수보다 적으면 길이를 줄이는 방식으로 최소 가능 길이를 구했다.
# 신기하네... 이분 탐색은 이렇게도 쓸 수 있구나.
# 동적 계획법과 같이, 아이디어가 중요하다는 걸 느끼게 해주는 고마운 문제였다.
# 그나저나, 난 개수가 요구 갯수와 동일할 때 최소 중간 길이를 구해서 출력하면 된다고 생각했는데,
# 그냥 가능할 때까지 이분 탐색을 진행한 뒤 왼쪽 인덱스를 출력하면 되는 거였어...
# 아직 이분 탐색에 대해 완벽히 이해하지 못했다는 증거겠지. 더 배워야 할게 많다.



# 4일차.
# 하... 오늘 챌린저도 어찌저찌 해결할 수 있을 줄 알았는데... 어림도 없나보다.
# 오늘 제공된 챌린저 문제는 내가 약 2주 전에 도전했다가 실패했던 문제여서
# 복수의 기회가 찾아왔음을 깨닫고 호기롭게 다시 도전했다.
# 대강 2개를 짝지어 구분하면 되니 투 포인터와 비슷하게 접근하면 된다고 생각했고, 힌트를 보니 얼추 들어맞았다.
# 근데 문제는 이걸 리스트 안에서 찾으려니 시간이 엄청 오래 걸릴 것 같다는 생각이 들었고,
# 그럼 방법은 하나지. 해시 쓰는 거. 그래서 수 목록을 딕셔너리로 만들었다.
# 이렇게 하니 확실히 찾긴 잘 찾는데, 문제가 있었다.
# 딕셔너리의 키를 가지고 투 포인터를 진행했는데, 딕셔너리 키 값이니 당연히 중복값이 제거되었고,
# 같은 두 값을 더한 좋은 수나 0과 자기 자신을 더한 좋은 수를 제대로 파악하지 못하는 것이었다.
# ([0, 0, 2]에서 좋은 수는 0개고, [0, 0, 0, 2, 2]에서 좋은 수는 5개다.
#  근데 중복값을 제거했으니 [0, 2]로만 투 포인터를 진행하고...)
# 그놈의 0... 덧셈의 항등원 하나가 코드를 다 망쳐놓네.
# 근데 도대체 그냥 리스트로 투 포인터를 진행하면 그게 자기 자신인지는 어떻게 판별하지?? 속도도 느릴 것 같은데????
# 저거 때문에 몇 시간을 고민하고 10번 가깝게 시도하다 다 틀려먹고 화나서 미들러로 도망쳤다.
# 근데 미들러도 마냥 쉽지는 않네. 하... 프로그래머를 하려면 이 정도의 수준은 기본적으로 갖춰야 하는건가?
# 힘들다 힘들어. 지금 새벽 5시 40분이네.
# 미들러 문제를 풀고 다시 푼 챌린저 코드를 바라보고 있자니 스파게티 코드가 어떻게 생겨나는건지 실감했다.
# 이거 안되니 이 코드 집어넣고 저거 안되니 저 코드 집어넣어서 점점 불어나는 코드 양이란...
# 스파게티 코드의 끔찍함도, 추후 수정의 어려움도, 생기지 않게 하려면 처음부터 적합한 알고리즘과 기술을 사용해서 탄탄하게 짜야 한다는 사실을 몸소 깨달았다.
# 계속 억지로 딕셔너리 쓰려니까 아주 죽을 맛이네. ...추후에 풀 땐 다른 방법을 생각해봐야지.



# 참고 웹사이트
1. https://chanhuiseok.github.io/posts/baek-22/

# 타 레벨 문제
B. https://www.acmicpc.net/problem/11945
M. 
C. https://www.acmicpc.net/problem/1253
