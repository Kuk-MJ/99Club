# StudyGroup Day 13!

# 13. 스타 수열
# https://school.programmers.co.kr/learn/courses/30/lessons/70130

from collections import Counter as Cntr

def solution(a):
    answer = []
    new_a = [a[0]]   # 변수 및 '가공 리스트' 생성
    
    vacant = 1   # '유예' 변수 생성
    for i in range(1, len(a)):   # 조건에 맞게 리스트 가공
        if a[i-1] != a[i]:
            new_a.append(a[i])   # 연이은 두 값이 다르다면 가공 리스트에 추가 후 유예 초기화
            vacant = 1
        else:
            if vacant:   # 같지만 유예 가능하다면
                new_a.append(a[i])   # 추가한 뒤
                vacant = 0   # 이후 유예 불가
        
    num_cnt = Cntr(new_a).most_common()   # 가공 리스트의 숫자 빈도수 파악
    intersection_nums = [n_c[0] for n_c in num_cnt if n_c[1] == num_cnt[0][1]]   # 최빈값 추출
    # print(new_a, intersection_nums)

    for inter_num in intersection_nums:   # 모든 최빈값에 대해 반복 수행
        idx = 1
        tmp_answer = 0   # 변수 생성
        
        while idx < len(new_a):
            if inter_num in {new_a[idx-1], new_a[idx]} and new_a[idx-1] != new_a[idx]:   # 두 수 쌍이 조건에 부합하는지 확인
                tmp_answer += 2
                idx += 1          # 결과에 따른 값 및 인덱스 변경
            idx += 1
            
        answer.append(tmp_answer)   # 결과값 추가
    
    return max(answer)   # 최댓값 반환

# '스타 수열' 최대 길이를 출력하는 문제. 조건은 링크 들어가면 질리도록 볼 수 있으니 설명 생략.
# 접근 방식이 난해했는데, 문제의 힌트를 본 것도 본 거지만,
# 일단 '조건에 어긋나게 하는 인덱스의 수를 빼자'라는 생각이 먼저 들었고, 경우의 수를 따져가며 어떤 수를 빼는게 좋을지 계산했다.
# ...근데 조건이 너무 다양하네. 특히 홀수일 때는 시작 방향에 따라 수 쌍이 달라지기 때문에,
# 양쪽에서 탐색하며 어떤 수를 뺄지 정해야 했다. ......이거 100% 시간 초과 난다. 아니더라도 비효율적이야.
# 그러다 문득, '굳이 빼야 되나? 우리가 수를 넣어서 수열을 만들면 안 되나?' 하는 생각이 들었고, 이 쪽이 훨씬 좋아보였다.
# 하지만 오답. 접근 방법은 옳았던 것 같은데... 간과한 부분이 좀 있나보다. ...많이 있는건가?
# 답답한 마음에 질문 글을 둘러보는데, 반례가 제시된 글에서 반례와 함께 '최빈값을 교집합 원소로 설정했다'라는 말이 눈에 띄었다.
# 나는 첫 서로 다른 두 수의 쌍을 교집합 원소로 설정했기에, 저 방법을 써보기로 했다.
# 근데 이것도 안 되네. 반례를 조금 더 살펴봤고, 수열을 만드는데 전혀 도움 안 되는 수가 많아서 그 수가 최빈값이 되는 경우가 있었다.
# (예를 들어... 쭉 늘어선 1이라던가.)
# 그럼 어떻게 해야 하느냐? 입력받은 리스트를 가공해야지. 있어봤자 의미 없는 수를 덜어내 새 리스트를 만들기로 했다.
# 처음엔 수 쌍으로 묶었을 때 두 수가 같은 쌍이라면 제외하는 식으로 가공 리스트를 만들었으나 실패했고,
# (정확히 무슨 이유로 실패했는진 기억이 나지 않는다. 일단 질문 글에 제공된 반례 중 안 되는게 있었던건 기억이 나는데...)
# 다음엔 같은 수가 3번 이상 연속으로 나오지 않도록 리스트를 가공했으나 또 실패했다.
# 그런데 알고보니 리스트 가공 방식을 바꾸면서 수 쌍의 두 수가 중복되는 조건을 붙이지 않아 생긴 일이었고, 그걸 넣어주니 드디어 통과.
# 쓸데없는 최적화가 프로그램을 망친다고 봐야하나.. 싶었다. ...근데 생각해보니 최적화라는건 문제없이 돌아가는 프로그램이 전제되어야 하는 거 아닌가?
# 아마 두 수 중복 조건이 첫 리스트 가공 방식엔 맞았던 것 같은데... 바꾸면서 그걸 추가해야 했는데 내가 미처 생각지 못했던 것 같다.
# ......이거 나중에 내가 봤을 때 뭔 소리 한건지 이해할 수 있으려나...?



# 참고 웹사이트
1. https://school.programmers.co.kr/questions/36352
2. https://school.programmers.co.kr/questions/21082
3. https://school.programmers.co.kr/questions/79150

# 타 레벨 문제
B. https://www.acmicpc.net/problem/10845
M. https://www.acmicpc.net/problem/2529
C. 
